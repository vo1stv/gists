A linear list is one in which the elements are not lists.  For example, a linear list is produced when simple "regular expressions" split a composition into its component parts.  In this case the list's elements, whether labelled "content" or "marker", are all strings of text extracted from the original composition.

Even a linear list may hide a hierarchy within it.  Simply turn pairs of markers into designated opening and closing delimiters and the contents between them can be treated as a nested list. Finding and ignoring comments inside a piece of writing is a practical application that makes use of this technique.  For example, consider a file with a line of notes appended at the end. Designate the beginning of the line as the opening delimiter, and pair it with any amount of whitespace at the end of the file as the closing delimiter.  When the closing delimiter is encountered, the text between it and the most recent opening delimiter can be removed from the linear list and put into a list of its own.  Doing so removes the appended comment line from the text.

It is easy to write a program that converts a linear list with a hidden hierarchy into a list of nested lists that more clearly reveals its structure.  The algorithm relies on the programmer designating matched sets of opening and closing delimiters.  The two sets must be the same length.  Markers in one set are opening delimiters and a corresponding marker in the other set is a closing delimiter.

Given two matched sets of opening and closing delimiters, the algorithm follows:
1)    Create a blank list.  This will be the active list. The original linear list is referred to as the source list.
2)    Read the source list from the start, moving each entry from it to the active list.
3)    Upon encountering an opening delimiter, the currently active list becomes the parent. Add the matching closing delimiter to a list of "pending delimiters" for use in steps 4 to 6. Create and activate a new list. Insert a placeholder to mark the current position in the parent list. 
4)    Repeat steps 2 and 3 until any closing delimiter is encountered.  If the closing delimiter does not occur in the list created in step 3, the closing delimiter is to be ignored and placed into the active list as if it had no significance; otherwise, proceed to step 5.
5)    Upon encountering a closing delimiter that is in the list created in step 3, remove the placeholder from the active list.  Proceed to step 6
6) If the delimiter is the last element of the list of pending delimiters, append it to the active list and then append the active list as an element to the parent. Remove the last element from the list of pending delimiters and return to step 4. Otherwise proceed to step 7.
7) The delimiter is not the last element of the list of pending delimiters. The opening delimiter of the active list is to be ignored and placed into the parent list as if it had no significance. To do so, concatenate the active list element by element to its parent.  Remove the last item from the list of pending delimiters, make the parent active, and return to step 5. 
8) Upon reaching the end of the composition, the active list and, in turn, all parent lists are concatenated element by element to their parents; the opening delimiter is to be ignored and placed into the parent list as if it had no significance. 

The result is a list in which some of the entries may also be lists.  A list groups portions of the composition into its component parts; otherwise entries contain text in the order written in the original composition, alternating between content and markers.