A linear list is one in which the elements are not lists.  For example, a linear list is produced when simple "regular expressions" split a composition into its component parts.  In this case the list's elements, whether labelled "content" or "marker", are all strings of text extracted from the original composition.

Even a linear list may hide a hierarchy within it.  Simply turn pairs of markers into designated opening and closing delimiters and the contents between them can be treated as a nested list. Finding and ignoring comments inside a piece of writing is a practical application that makes use of this technique.  For example, consider a file with a line of notes appended at the end. Designate the beginning of the line as the opening delimiter, and pair it with any amount of whitespace at the end of the file as the closing delimiter.  When the closing delimiter is encountered, the text between it and the most recent opening delimiter can be removed from the linear list and put into a list of its own.  Doing so removes the appended comment line from the text.

It is easy to write a program that converts a linear list with a hidden hierarchy into a list of nested lists that more clearly reveals its structure.  The algorithm relies on the programmer designating matched sets of opening and closing delimiters.  The two sets must be the same length.  Markers in one set are opening delimiters and a corresponding marker in the other set is a closing delimiter.  A marker can be designated as an opening delimiter or a closing delimiter: the designations are mutually exclusive.

Given two matched sets of opening and closing delimiters, the algorithm follows:
1)    Read the linear list from the start
2)    Upon encountering an opening delimiter, create a new list and insert a placeholder to mark the current position in the parent list. 
3)    Continue reading the linear list. Subsequent content is removed from the source list and stored into the new list until the corresponding closing delimiter is encountered.  
4)    Upon encountering the expected closing delimiter, remove the placeholder and replace it with the active list.

When converting from a linear list to a list of nested lists, it is an error if the closing delimiter occurs out of order. To cover this possibility, the closing delimiter is to be ignored and placed into the active list as if it had no significance.  Furthermore, upon reaching the end of the composition, all nested lists are closed and take the place of the placeholder in their parent lists.  After processing the list in this way, an error-checking routine can detect errors by:
i)    looking for lists that do not end with the proper matching delimiter
ii)   looking for closing delimiters that do not occur at the ends of a nested list
