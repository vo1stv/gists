# This is a basic workflow to help you get started with Actions

name: ghpages

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - actions  
    paths:
      - '.github/workflows/**'
  schedule:
      # * is a special character in YAML so you have to quote this string
      - cron:  '0 * * * *'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: vo1stv/checkout@v2
      with:
        # Repository name with owner. For example, actions/checkout
        # Default: ${{ github.repository }}
        #repository: ''

        # The branch, tag or SHA to checkout. When checking out the repository that
        # triggered a workflow, this defaults to the reference or SHA for that event.
        # Otherwise, defaults to `master`.
        ref: 'gh-pages'

        # Personal access token (PAT) used to fetch the repository. The PAT is configured
        # with the local git config, which enables your scripts to run authenticated git
        # commands. The post-job step removes the PAT.
        #
        # We recommend using a service account with the least permissions necessary. Also
        # when generating a new PAT, select the least scopes necessary.
        #
        # [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
        #
        # Default: ${{ github.token }}
        token: ${{ secrets.GHPAGES_DEPLOY }}

    # Runs a single command using the runners shell
    - name: Run a multi-line script
      run: |
           git config --global user.email "${{ secrets.ROBOT_EMAIL }}"
           git config --global user.name "${{ secrets.ROBOT_NAME }}"
           git fetch origin actions
           git checkout actions
           git submodule init gists
           git submodule update gists
           cd gists
           GIST=`git remote -v | grep -F "(fetch)" | grep -Eo "https://[^ ]+"`
           git pull origin master
           cd ..
           TEST=$(git status --porcelain | wc -l)
           if [ 0 -eq $TEST ]; then
              echo "No changes"
           else
              git commit -am 'updated from gist submodule'
              git push origin actions
           fi
           git submodule deinit gists
           if [ 0 -ne $TEST ]; then
              git fetch origin master
              git checkout master
              git remote add -t master gist ${GIST}
              git pull gist master
              git push origin master
           fi
           git checkout actions
           if [ 0 -ne $TEST ]; then
              git checkout gh-pages
              git checkout origin/actions -- index.html
              TEST=$(git status --porcelain | wc -l)
              if [ 0 -eq $TEST ]; then
                 echo "No changes"
              else
                 git commit -am 'redeploying'
                 git push origin gh-pages
              fi
           fi 
           
